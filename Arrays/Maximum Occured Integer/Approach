In a realm where numbers hold secrets, a captivating challenge awaits, which is, Finding Maximum Appearing Element !!!

Our Task: Given two arrays L[ ] and R[ ] of size N where L[i] and R[i] (0 ≤ L[i], R[i] < 106) denotes a range of numbers, the task is to find the maximum occurred integer in all the ranges. If more than one such integer exists, print the smallest one. 


Thus 4 is the Most appeared Element in the Ranges
Examples: 

Input: L[ ] = {1, 4, 3, 1}, R[ ] = {15, 8, 5, 4}
Output: 4

Explanation: Overall ranges are: {1,2,3,4,5,6,7,8,9,10,11,12,13,14 15}, {4,5,6,7,8}, {3,4,5}, {1,2,3,4}. 

In all these ranges, 4 appears the most times.

Input: L[ ] = {1, 5, 9, 13, 21}, R[ ] = {15, 8, 12, 20, 24}
Output: 5
Explanation: Overall Ranges are: {1,2,3,4,5,6,7,8,9,10,11,12,13,14 15}, {5,6,7,8}, {9,10,11,12}, {13,14,15,16,17,18,19,20},{21,22,23,24}
In these ranges, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 all appear 2 times. The smallest number among all are 5.

We have 2 approaches to solve the problem: Naive Approach and Efficient Approach

1) Naive Approach:
The idea is to:

Traverse through all the ranges. Then for every range, count frequencies, make a hash table (array) to store every item. Then traverse through other ranges and increment the frequency of every item. The item with the highest frequency is our answer. 

Below is the implementation of the above approach:


#include <iostream>
using namespace std;

int maximumOccurredElement(int l[], int r[], int n)
{
    int freq[100]={0};
    for (int i = 0; i < n; i++) {
        for (int j = l[i]; j <= r[i]; j++) {
            freq[j]++;
        }
    }
    int res = 0;
    for (int i = 0; i < 100; i++) {
        if (freq[i] > freq[res])
            res = i;
    }
    return res;
}
int main()
{
    int L[] = { 1, 5, 9, 13, 21 };
    int R[] = { 15, 8, 12, 20, 30 };
    int n = sizeof(L) / sizeof(L[0]);

    cout << maximumOccurredElement(L, R, n) << endl;
    return 0;
}
Output:

5
Time Complexity: O(N*M). Here N is the number of ranges and M is the maximum number of elements in any of the ranges.
Auxiliary Space: O(M). For Hash table.

 
2) Efficient Approach:
Below is the idea to solve the problem:

The idea is to use the Difference array technique. Create a vector initialized with value zero. Iterate through every range and mark the presence of the beginning of every range by incrementing the start of the range with one i.e. arr[L[i]]++ and mark the end of the range by decrementing at index one greater than the end of range by one i.e. arr[R[i]+1]–.

Now when computing the prefix sum, Since the beginning is marked with one, all the values after beginning will be incremented by one. Now as increment is only targeted only till the end of the range, the decrement on index R[i]+1 prevents that for every range i.

Illustration:

L[] = {1, 2, 3} , R[] = {3, 5 , 7}

1. For beginning of range arr[L[i]]++ the array becomes {0,1,1,1,0,0,0,0,……}

2. For end of range arr[R[i]+1]– the array becomes  {0,1,1,1,-1, 0, -1, 0,-1,……}

3. After prefix sum the array becomes {0,1,2,3,2,2,1,1,0…}

Do prefix sum, the sum of elements after (1) is incremented by one because beginning was marked. Now elements after (3) must not be incremented so if there’s a range one, two, three, the values from one, two, three should only be incremented by one or their frequency should be incremented by one.

That is why decreasing the value of arr[R[i]+1] is needed so that elements after the end of this range have minus one subtracted to values. That is how to nullify the impact of incrementing the value when prefix will be taken.

So when taking the prefix, simply decrement every value after the range ends, since I want to increment elements only in the range. That’s the idea of this algorithm. 

Follow the below steps to Implement the idea:

Initialize a Hash array arr[] to store the occurrence of every element in all the ranges combined.
Iterate over all the N ranges and increment L[i] by one and decrement R[i] by one.
Run a Loop from 1 to the maximum end value of all the ranges and take the Prefix sum. 
Below is the Implementation of the above approach:


// C++ program to find maximum occurred element in
// given N ranges.
#include <bits/stdc++.h>
#define MAX 1000000
using namespace std;

// Return the maximum occurred element in all ranges.
int maximumOccurredElement(int L[], int R[], int n)
{
	// Initialising all element of array to 0.
	int arr[MAX];
	memset(arr, 0, sizeof arr);

	// Adding +1 at Li index and subtracting 1
	// at Ri index.
	int maxi = -1;
	for (int i = 0; i < n; i++) {
		arr[L[i]] += 1;
		arr[R[i] + 1] -= 1;
		if (R[i] > maxi) {
			maxi = R[i];
		}
	}

	// Finding prefix sum and index having maximum
	// prefix sum.
	int msum = arr[0], ind;
	for (int i = 1; i < maxi + 1; i++) {
		arr[i] += arr[i - 1];
		if (msum < arr[i]) {
			msum = arr[i];
			ind = i;
		}
	}

	return ind;
}

// Driven code
int main()
{
	int L[] = { 1, 5, 9, 13, 21 };
	int R[] = { 15, 8, 12, 20, 30 };
	int n = sizeof(L) / sizeof(L[0]);

	cout << maximumOccurredElement(L, R, n) << endl;
	return 0;
}
Output

5
Time Complexity: O(N + MAX) 
Auxiliary space: O(MAX)

